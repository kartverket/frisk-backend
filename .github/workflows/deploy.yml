name: Build and deploy backend to Fly and SKIP
on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit hash to deploy'
        default: ''
        type: string
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    paths:
      - src/**
      - .github/workflows/deploy.yml
      - Dockerfile
      - gradle.properties
      - build.gradle.kts

permissions:
  id-token: write
  contents: write

env:
  REGISTRY: ghcr.io
  ARGO_VERSION_FILE: image-url-frisk-backend

jobs:
  build:
    name: Build and push docker image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      image_url: ${{ steps.setOutput.outputs.image_url }}
    steps:
      - name: Checkout code
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.commit_sha == '' }}
        uses: actions/checkout@v4

      - name: Checkout specific commit
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha != '' }}
        run: git checkout ${{ github.event.inputs.commit_sha }}

      - name: Set tag
        id: set-tag
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          else
            echo "image_tag=prebuild-temp" >> $GITHUB_OUTPUT
          fi

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=sha,format=long
            type=raw,value=${{ steps.set-tag.outputs.image_tag }}

      - name: Build docker and push
        id: build-docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: ${{ !github.event.pull_request.draft }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set output with build values
        id: setOutput
        run: |
          echo "image_url=${{ env.REGISTRY }}/${{ github.repository }}@${{ steps.build-docker.outputs.digest }}" >> $GITHUB_OUTPUT


  dependencygraph:
    name: Generate dependency graph
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          architecture: 'x64'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@v4

  tests:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          architecture: 'x64'

      - name: test pull image
        run: docker pull postgres:15-alpine

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@4a417b5b1a01db0b076987546b67f8de18e7d340 # v4.0.0

      - name: Run Tests
        run: ./gradlew test

  pharos:
    name: Run Pharos
    needs: build
    permissions:
      actions: read
      packages: read
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: "Run Pharos"
        uses: kartverket/pharos@v0.2.2
        with:
          image_url: ${{ needs.build.outputs.image_url }}

  deploy-fly:
    name: Deploy app
    runs-on: ubuntu-latest
    concurrency: deploy-group    # optional: ensure only one action runs at a time
    needs: [tests]
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy-dev:
    name: Deploy to dev
    if: github.ref == 'refs/heads/main'
    needs: [ deploy-fly, pharos ]
    runs-on: ubuntu-latest
    environment:
      name: dev
    permissions:
      id-token: write
    steps:
      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          scope: kartverket/skvis-apps
          identity: frisk-backend
      - name: Checkout skvis-apps
        uses: actions/checkout@v4
        with:
          repository: kartverket/skvis-apps
          ref: main
          token: ${{ steps.octo-sts.outputs.token }}
      - name: Update version
        run: |
          echo "\"${{ needs.build.outputs.image_url }}\"" > "env/atgcp1-dev/regelrett-main/${{ env.ARGO_VERSION_FILE }}"
          git config --global user.email "noreply@kartverket.no"
          git config --global user.name "Frisk CI"
          git commit -am "Update ${{ env.ARGO_VERSION_FILE }}"
          git push


  deploy-prod:
    name: Deploy to prod
    if: github.ref == 'refs/heads/main'
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment:
      name: prod
    permissions:
      id-token: write
    steps:
      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          scope: kartverket/skvis-apps
          identity: frisk-backend
      - name: Checkout skvis-apps
        uses: actions/checkout@v4
        with:
          repository: kartverket/skvis-apps
          ref: main
          token: ${{ steps.octo-sts.outputs.token }}
      - name: Update version
        run: |
          echo "\"${{ needs.build.outputs.image_url }}\"" > "env/atgcp1-prod/regelrett-main/${{ env.ARGO_VERSION_FILE }}"
          git config --global user.email "noreply@kartverket.no"
          git config --global user.name "Frisk CI"
          git pull
          git commit -am "Update ${{ env.ARGO_VERSION_FILE }}"
          git push